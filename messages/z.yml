# @version ">=2.0"

tasks:
  messages.backup:
    help: 'Backup messages for all locales into a message archive'
    args:
      target_env: ?
      _backup_file: sprintf("messages-%s-%s.tar.gz", target_env, now)
    do:
      - @(for lang in messages.languages) @(sh ssh(target_env)) cd $(envs[target_env].root) && $(defaults("php_bin", target_env, "php")) $(symfony.console) --env=$(target_env) zicht:messages:dump $(lang) --format php > messages.$(lang).php
      - @(sh ssh(target_env)) cd $(envs[target_env].root) && tar zc$(VERBOSE ? "v")f $(_backup_file) messages.*.php
      - rsync $(VERBOSE ? "--progress") $(envs[target_env].ssh):$(envs[target_env].root)$(_backup_file) ./$(_backup_file)
      - @(sh ssh(target_env)) cd $(envs[target_env].root) && rm $(_backup_file) messages.*.php
    yield: _backup_file

  messages.load_files:
    help: 'Connect to target_env and load messages from all yml files (will overwrite imported messages by default)'
    args:
      target_env: ?
    flags:
      local: false
      overwrite: false
      overwrite_unknown: false
      overwrite_user: false
      overwrite_import: true
    do:
      - |
          @(sh local ? SHELL : ssh(target_env))
          @(if messages.overwrite_compatibility)
          cd $(envs[target_env].root);
          find vendor/zicht src -type f -name "*.??.yml" -exec $(defaults("php_bin", target_env, "php")) $(envs[target_env].root)$(symfony.console) --env=$(target_env) $(VERBOSE ? "--verbose") $(overwrite ? "--overwrite") zicht:messages:load '{}' +

      - |
          @(sh local ? SHELL : ssh(target_env))
          @(if !messages.overwrite_compatibility)
          cd $(envs[target_env].root);
          find vendor/zicht src -type f -name "*.??.yml" -exec $(defaults("php_bin", target_env, "php")) $(envs[target_env].root)$(symfony.console) --env=$(target_env) $(VERBOSE ? "--verbose") $(overwrite_unknown || overwrite ? "--overwrite-unknown") $(overwrite_user || overwrite ? "--overwrite-user") $(overwrite_import || overwrite ? "--overwrite-import") zicht:messages:load '{}' +

  messages.local.backup:
    help: 'Backup messages from current/local environmant for all locales into a message archive'
    args:
      _backup_file: sprintf("messages-local-%s.tar.gz", now)
    do:
      - @(for lang in messages.languages) $(defaults("php_bin", "local", "php")) $(symfony.console) zicht:messages:dump $(lang) --format php > messages.$(lang).php
      - tar zc$(VERBOSE ? "v")f $(_backup_file) messages.*.php
      - rm messages.*.php
      - echo "--> $(_backup_file)"
    yield: _backup_file

  messages.load:
    help: 'Load a message archive into the current environment'
    args:
      file: ?
    flags:
      overwrite: false
      overwrite_unknown: false
      overwrite_user: false
      overwrite_import: true
    do:
      - cd $(envs.local.root) && tar zxf $(file)
      - @(if messages.overwrite_compatibility) @(for lang in messages.languages) $(symfony.console) zicht:messages:load messages.$(lang).php $(VERBOSE ? "--verbose") $(overwrite ? "--overwrite")
      - @(if !messages.overwrite_compatibility) @(for lang in messages.languages) $(symfony.console) zicht:messages:load messages.$(lang).php $(VERBOSE ? "--verbose") $(overwrite_unknown || overwrite ? "--overwrite-unknown") $(overwrite_user || overwrite ? "--overwrite-user") $(overwrite_import || overwrite ? "--overwrite-import")
      - cd $(envs.local.root) && rm messages.*.php

  messages.pull:
    help: 'Pull a message archive from a remote env into the current environment'
    args:
      target_env: ?
      file: tasks.messages.backup
    do:
      - @messages.load
      - rm $(file)

  messages.push:
    help: |
      Push a message archive to a remote environment

      The message archive is typically built by a message:dump or message:backup command:

      z messages:backup staging
      z messages:push production ./messages-staging-*.tar.gz
    unless: !confirm(sprintf("You are pushing message archive <comment>%s</comment> to environment <comment>%s</comment>, are you sure?", file, target_env))
    args:
      target_env:  ?
      file: ?
    flags:
      overwrite: false
      overwrite_unknown: false
      overwrite_user: false
      overwrite_import: true
    unless: !messages.overwrite_compatibility
    do:
      - scp $(file) $(envs[target_env].ssh):$(envs[target_env].root)$(file)
      - @(sh ssh(target_env)) cd $(envs[target_env].root); tar zxf $(file)
      - @(if messages.overwrite_compatibility) @(for lang in messages.languages) @(sh ssh(target_env)) cd $(envs[target_env].root); $(defaults("php_bin", target_env, "php")) $(symfony.console) --env=$(target_env) zicht:messages:load messages.$(lang).php $(VERBOSE ? "--verbose") $(overwrite ? "--overwrite")
      - @(if !messages.overwrite_compatibility) @(for lang in messages.languages) @(sh ssh(target_env)) cd $(envs[target_env].root); $(defaults("php_bin", target_env, "php")) $(symfony.console) --env=$(target_env) zicht:messages:load messages.$(lang).php $(VERBOSE ? "--verbose") $(overwrite_unknown || overwrite ? "--overwrite-unknown") $(overwrite_user || overwrite ? "--overwrite-user") $(overwrite_import || overwrite ? "--overwrite-import")
      - @(sh ssh(target_env)) cd $(envs[target_env].root); rm messages.*.php

  messages.cleanup:
    help: Find all project yml files and rewrite them into a consistent format
    do:
      - $(messages.yaz_cleanup) message cleanup --duplicate-strategy=first --sync-strategy=use-key --depth-strategy=join --indent=4 $(VERBOSE ? "--verbose")
      
